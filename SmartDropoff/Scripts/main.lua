local helpers = require("helpers")
local config = require "config"

local hotkeyEnabled = false

---@type UPalMapObjectConcreteModelBase
local onTriggerInteractContext
---@type APlayerController
local onTriggerInteractPlayer
---@type UPalUtility
local palUtility

-- Returns items from player's inventory and opened storage container
local function GetItems()
  local context = onTriggerInteractContext
  local player = onTriggerInteractPlayer

  local containerItems = context:GetItemContainerModule():GetContainer().ItemSlotArray
  local inventoryData = palUtility:GetPlayerState(player):GetInventoryData()
  -- magic numbers from EPalItemTypeA enum, importing the actual enum is not possible AFAIK
  local itemTypes = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  ---@type TArray<FPalItemAndNum>
  local inventoryItemInfos = {}
  -- //TODO: replace with UPalItemContainerMultiHelper.Containers[index].ItemSlotArray ?
  inventoryData:GetItemInfoByItemTypeA(itemTypes, inventoryItemInfos)

  return containerItems, inventoryItemInfos
end

-- Returns items that are both in player's inventory and opened storage container
local function GetMatches()
  local containerItems, inventoryItemInfos = GetItems()

  local lookup = {}
  for index = 1, #containerItems do
    local staticId = containerItems[index]:GetItemId().StaticId:ToString()
    lookup[staticId] = true
  end

  local matched = {}
  for _, item in ipairs(inventoryItemInfos) do
    local retrievedItem = item:get()
    local staticId = retrievedItem.ItemId.StaticId:ToString()

    if lookup[staticId] then
      table.insert(matched, item)
    end
  end

  return matched
end

-- Generated by AI, probably useless:

-- local function StoreMatchedItems()
--   local containerItems, inventoryItemInfos = GetItems()

--   local container = onTriggerInteractContext:GetItemContainerModule():GetContainer()
--   local inventoryData = palUtility:GetPlayerState(onTriggerInteractPlayer):GetInventoryData()

--   ---@type UPalItemContainerMultiHelper
--   local containerHelper = StaticFindObject("/Script/Pal.PalItemContainerMultiHelper")
--   local containerIndex = containerHelper:FindByStaticItemIds(containerItems)

--   if containerIndex == -1 then
--     print("Container not found")
--     return
--   end

--   local containerSlotArray = containerHelper.Containers[containerIndex].ItemSlotArray

--   for _, item in ipairs(inventoryItemInfos) do
--     local retrievedItem = item:get()
--     local staticId = retrievedItem.ItemId.StaticId:ToString()

--     for index = 1, #containerSlotArray do
--       local containerItem = containerSlotArray[index]
--       if containerItem:GetItemId().StaticId:ToString() == staticId then
--         local num = retrievedItem.Num
--         local slot = containerItem:GetSlot()
--         local containerType = container:GetContainerType()
--         local containerId = container:GetContainerId()

--         inventoryData:RequestFillSlotToTargetContainerFromInventory_ToServer(num, slot, containerType, containerId)
--         break
--       end
--     end
--   end
-- end

RegisterHook("/Script/Engine.PlayerController:ClientRestart", function()
  ---@diagnostic disable-next-line: cast-local-type
  palUtility = StaticFindObject("/Script/Pal.Default__PalUtility")



  RegisterHook("/Script/Pal.PalMapObjectConcreteModelBase:OnTriggerInteract", function(Context, Player, InteractionType)
    hotkeyEnabled = true

    onTriggerInteractContext = Context:get()
    onTriggerInteractPlayer = Player:get()
  end)

  RegisterKeyBind(config.DROPOFF_HOTKEY, function()
    if not hotkeyEnabled then
      print("Hotkey disabled")
      return
    end

    print('Hotkey triggered')

    local matchedItems = GetMatches()
    for _, item in ipairs(matchedItems) do
      local retrievedItem = item:get()

      print("Matched Static ID:", retrievedItem.ItemId.StaticId:ToString(), "; Count:", retrievedItem.Num)
    end

    StoreMatchedItems()



    -- modify using method:
    -- UPalPlayerInventoryData:RequestFillSlotToTargetContainerFromInventory_ToServer
    -- UPalUIInventoryModel:TryFillSlotToTargetContainerFromInventory

    -- modify using widget:
    -- RegisterHook(
    --   "/Game/Pal/Blueprint/UI/CommonWidget/CommonScrollList/WBP_PalCommonScrollList.WBP_PalCommonScrollList_C:Construct",
    --   function(Context)
    --     -- WBP_PalItemScrollList_C /Engine/Transient.PalGameEngine_2147482595:BP_PalGameInstance_C_2147482520.WBP_PalOverallUILayout_C_2147482201.WidgetTree_2147482200.WBP_ItemChest_C_2147010652.WidgetTree_2147010651.WBP_IngameMenu_Chest.WidgetTree_2147010650.WBP_PalItemScrollList
    --     -- WBP_PalPlayerInventoryScrollList_C /Engine/Transient.PalGameEngine_2147482595:BP_PalGameInstance_C_2147482520.WBP_PalOverallUILayout_C_2147482201.WidgetTree_2147482200.WBP_ItemChest_C_2147010652.WidgetTree_2147010651.WBP_IngameMenu_Chest.WidgetTree_2147010650.WBP_Common_Inventory.WidgetTree_2147010649.WBP_PalPlayerInventoryScrollList
    --   end)

    -- UPalPlayerInventoryData:TryGetContainerFromInventoryType - get container shortcut?
    -- UPalItemContainerMultiHelper:FindByStaticItemIds - use to find container

    -- direct modify:
    -- UPalItemContainerMultiHelper.Containers[index].ItemSlotArray
    -- GetContainer().ItemSlotArray
  end)
end
)
